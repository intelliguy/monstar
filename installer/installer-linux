#!/usr/bin/python3
import sys,yaml,os,getopt,time

TEMPDIR="tmp"

class Repos:
# Will Make When it's needed
  def __init__(self):
    self.list=[]
  
  def add(self, repo):
    self.append(repo)

  def getId(self, repo):
    return ''

class HelmRelease:
  def __init__(self, repo, chart, name, namespace, version, override):
    self.repo = repo
    self.chart = chart
    self.name = name
    self.namespace = namespace
    self.version = version
    self.override = override

  def checkPrerequisitions(self):
  #  stream = os.popen('kubectl get ns {}'
  #     .format(self.namespace))
  #   try:
  #     return stream.read().rsplit("STATUS:")[1].split()[0].strip()
  #   except IndexError as exc:
  #     return None
    return True

  def autoApplyPrerequisitions(self):
    return True

  def install(self):
    yaml.dump(self.override, open('vo', 'w') , default_flow_style=False)
    print('[install {} from {} as {} in {}]'.
      format(self.chart, self.repo, self.name, self.namespace))
    os.system('helm repo add monstarrepo {} | grep -i error'
      .format(self.repo))
    os.system('helm install -n {0} {1} monstarrepo/{2} --version {3} -f vo'
      .format(self.namespace, self.name, self.chart, self.version))
    os.system('helm repo rm monstarrepo | grep -i error')

  def uninstall(self):
    print('helm delete -n {} {} | grep status'
      .format(self.namespace, self.name))

  def getStatus(self):
    stream = os.popen('helm status -n {} {}'
      .format(self.namespace, self.name))
    try:
      return stream.read().rsplit("STATUS:")[1].split()[0].strip()
    except IndexError as exc:
      return None

  def getStatusfull(self):
    os.system('helm status -n {} {}'
      .format(self.namespace, self.name))

def install_and_check_done(manifests, install, config):
  # os.system("helm install -n monstar {} monstarrepo/{} -f vo".format())
  try:
    cinterval=int(config['metadata']['checkInterval'])
  except KeyError:
    cinterval=10
  pending = []
  for chart in install:
    manifests[chart].install()
    pending.append(chart)

  while True:
    successed = []
    for chart in pending:
      if manifests[chart].getStatus()=='deployed':
        successed.append(chart)

    for chart in successed:
      pending.remove(chart)
  
    print("\nWaiting for finish: ")
    print(pending)
    if not pending:
      break
    time.sleep(cinterval)
  return

def load_manifest(manifest,target):
  os.system("awk '{f=\"split_\" NR; print $0 > f}' RS='---' "+manifest)

  manifests = dict()
  for entry in os.scandir():
    if entry.name.startswith('split_'):
      with open(entry, 'r') as stream:
        try:
          parsed = yaml.safe_load(stream)
          manifests[parsed['metadata']['name']]=HelmRelease( 
            parsed['spec']['chart']['repository'],
            parsed['spec']['chart']['name'],
            parsed['spec']['releaseName'],
            parsed['spec']['targetNamespace'],
            parsed['spec']['chart']['version'],
            parsed['spec']['values'])
        except yaml.YAMLError as exc:
          print(exc)
  os.system("rm  split_*")

  return manifests

def printhelp():
    print('Usage: install-linux -m APP_MANIFEST [-w WORK_FOLW_NAME]')

def main(argv):
  manifest=''
  wf='default'
  try:
    opts, args = getopt.getopt(argv,"hm:w:",["manifest=","workflow="])
  except getopt.GetoptError:
    printhelp()
    sys.exit(-1)
  
  for opt, arg in opts:
    if opt == '-h':
      printhelp()
      sys.exit(0)
    elif opt in ("-m", "--manifest"):
      manifest = arg
    elif opt in ("-w", "--workflow"):
      wf = arg

  if (manifest==''):
    printhelp()
    sys.exit(-1)

  try:
    config = yaml.safe_load(open('config.yaml','r'))
    manifests=load_manifest(manifest, TEMPDIR)

    for key in config['workflow'][wf].keys():
      install_and_check_done(manifests,config['workflow'][wf][key],config)
  except yaml.YAMLError as exc:
    print(exc)


if __name__ == "__main__":
  main(sys.argv[1:])
  